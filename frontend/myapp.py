import streamlit as st
import sys
import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "src")))
from inference import StanceDetection, LLMInference, SLMInference

# 定义全局变量
if "stance_detection" not in st.session_state:
    st.session_state.stance_detection = StanceDetection(
        "models/output/checkpoint-5600", "google-bert/bert-base-multilingual-cased"
    )

# 定义模型

if "gpt_4o" not in st.session_state:
    st.session_state.gpt_4o = LLMInference("gpt-4o")

if "deepseek_r1" not in st.session_state:
    st.session_state.deepseek_r1 = LLMInference("deepseek-r1")

if "gpt_35" not in st.session_state:
    st.session_state.gpt_35 = LLMInference("gpt-3.5")

if "gpt_3" not in st.session_state:
    st.session_state.gpt_3 = LLMInference("gpt-3")

if "slm" not in st.session_state:
    st.session_state.slm = SLMInference("qwen-2.5b")


def call_crawler(**kwargs) -> str:
    pass


def draw_pie_chart(pos, neg, neu):
    ratio = {"positive": pos, "negative": neg, "neutral": neu}
    labels = list(ratio.keys())
    sizes = [ratio[label] for label in labels]
    colors = ["gold", "yellowgreen", "lightcoral"]
    explode = (0, 0, 0)
    fig, ax = plt.subplots()
    ax.pie(sizes, explode=explode, labels=labels, colors=colors, autopct="%1.1f%%", shadow=True, startangle=90)
    ax.axis("equal")
    return fig


def process_csv(file_path, stance_detection):
    """
    Args:
        file_path (str): CSV 文件路径。
        stance_detection (callable): 接受 text 和 target 的函数，返回包含 label 的字典。
    """
    # 读取 CSV 文件
    df = pd.read_csv(file_path)

    # 检查是否存在 label 列，如果不存在则新增
    if "label" not in df.columns:
        df["label"] = None

    # 定义标签映射规则
    label_mapping = {"POSITIVE": 1, "NEGATIVE": 0, "NEUTRAL": 2}

    def map_stance(row):
        result = stance_detection(row["text"], row["target"])
        return label_mapping.get(result["label"], None)

    # 应用 map 函数更新 label 列
    df["label"] = df.apply(map_stance, axis=1)

    # 将处理后的数据写回文件
    df.to_csv(file_path, index=False)
    print(f"文件 {file_path} 已成功处理并保存。")

    # 将处理后的数据写回文件
    df.to_csv(file_path, index=False)
    print(f"文件 {file_path} 已成功处理并保存。")


# with st.sidebar:
#     openai_api_key = st.text_input("OpenAI API Key", key="chatbot_api_key", type="password")

st.title("Public Sentiment Analysis")

stance_detection = st.session_state.stance_detection

st.markdown(
    "This is a simple demo to show our sentiment analysis model in action. "
    "Give a sentence and a target. We will tell you the sentiment of the sentence towards the target."
)

sentence = st.text_input("Enter a sentence", "I feel great")
target = st.text_input("Enter a target you want to analyze", "I")

if st.button("Analyze"):
    st.write(f"Analyzing: {sentence}")
    stance = stance_detection(sentence, target)
    st.write(f"Sentiment: {stance['label']}")
    st.write(f"Confidence: {stance['score']}")

st.title("Public Sentiment Monitoring")

st.markdown(
    "This is a simple demo to show how does our method work in sentiment monitoring. "
    "Given a monitoring topic, we will show you the sentiment of the latest selected social media posts. "
    "Please notice that THIS PART HAS NOT BEEN IMPLEMENTED YET."
)

st.markdown("You can use a large language model to help you monitor the sentiment of the public opinion.")
st.markdown(
    "Please note that LLMs have bias and hullucination problems, the content generated by LLMs may not be reliable."
)

topic = st.text_input("Enter a topic you want to monitor", "两会提出的政策")
target = st.text_input("Enter a target you want to monitor", "政府")
keyword_monitoring = st.text_input(
    "Enter the keyword(s) about the posts you want to retrieve, split by ','", "两会, 北京, 政府"
)
platform = st.selectbox("Select a social media platform", ["Weibo", "RedNote", "Tieba"])
date_range = st.date_input("Select a date range", [pd.to_datetime("2025-03-01"), pd.to_datetime("2025-03-10")])
llm_used = st.selectbox("Select a language model", ["No LLM used", "GPT-4o", "DeepSeek-r1", "GPT-3.5", "GPT-3"])


if st.button("Monitor"):

    data_file = call_crawler(
        topic=topic, target=target, keyword_monitoring=keyword_monitoring, platform=platform, date_range=date_range
    )
    if data_file is None:
        data_file = "analysis/demo.csv"

    # 处理 CSV 文件
    process_csv(data_file, stance_detection)
    # 获取process_csv处理后的label列的占比
    df = pd.read_csv(data_file)
    label_counts = df["label"].value_counts(normalize=True)
    label_counts = label_counts.reindex([1, 0, 2], fill_value=0)  # 确保顺序为 POSITIVE, NEGATIVE, NEUTRAL
    pos_ratio = label_counts[1]
    neg_ratio = label_counts[0]
    neu_ratio = label_counts[2]
    # 绘制饼图
    fig = draw_pie_chart(pos_ratio, neg_ratio, neu_ratio)
    st.pyplot(fig)
    if llm_used != "No LLM used":
        st.markdown("### LLM's analysis:")
        if llm_used == "GPT-4o":
            llm = st.session_state.gpt_4o
        elif llm_used == "DeepSeek-r1":
            llm = st.session_state.deepseek_r1
        elif llm_used == "GPT-3.5":
            llm = st.session_state.gpt_35
        elif llm_used == "GPT-3":
            llm = st.session_state.gpt_3

        # 调用小模型，抽样总结

        df = pd.read_csv(data_file)
        # 由于target要求保持一致，取出数据集中的第一个target
        target = df["target"].iloc[0]
        # 从 df 中各抽取 20 条标签为 0、1、2 的数据，并存储为字典
        sampled_data_dict = {
            0: df[df["label"] == 0]
            .sample(n=20, random_state=42, replace=True)
            .reset_index(drop=True),  # 标签为 0 的数据
            1: df[df["label"] == 1]
            .sample(n=20, random_state=42, replace=True)
            .reset_index(drop=True),  # 标签为 1 的数据
            2: df[df["label"] == 2]
            .sample(n=20, random_state=42, replace=True)
            .reset_index(drop=True),  # 标签为 2 的数据
        }

        sampled_data_list = [sampled_data_dict[0], sampled_data_dict[1], sampled_data_dict[2]]

        slm_summary = st.session_state.slm.summary(
            favor_text=sampled_data_list[1],
            neutral_text=sampled_data_list[2],
            against_text=sampled_data_list[0],
            target=target,
        )

        llm_inference = llm.analyze(
            summary=slm_summary,
            target=target,
            topic=topic,
            favor_rate=pos_ratio,
            against_rate=neg_ratio,
            neutral_rate=neu_ratio,
        )

    if llm_used != "No LLM used":
        st.markdown("### LLM's anlysis:")
        st.markdown(llm_inference)
